apiVersion: v1
kind: ConfigMap
metadata:
  name: path-to-inputfile
data:
  inputfile.txt: |
    db-config/config.ini
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apps
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apps
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        identity_template: "true"
        app: apps
    spec:
      initContainers:
        - name: sidecar
          securityContext:
            # privileged is needed to create socket and bundle files
            # privileged: true
          image: tsidentity/tornjak-example-sidecar:v0.1
          imagePullPolicy: Always
          # use command to override the command of the image/dockerfile
          command: ["/usr/local/bin/run-sidecar-bash.sh"]
          args:
            - "/usr/local/bin/inputfile.txt"
          env:
          - name: SOCKETFILE
            value: "/run/spire/sockets/spire-agent.sock"
          - name: ROLE
            value: "dbrole"
          - name: VAULT_ADDR
            # Provide address to your VAULT server
            # value: "https://vault-vault.apps.cluster-x2xrt.x2xrt.sandbox660.opentlc.com"
            value: "$VAULT_ADDR" 
          volumeMounts:
            - name: spiffe-workload-api
              mountPath: /run/spire/sockets
              readOnly: true
            - name: db-config
              mountPath: /run/db
            - name: mount-inputfile
              mountPath: /usr/local/bin/inputfile.txt
              subPath: inputfile.txt
      containers:
        - image: tsidentity/tornjak-example-python:v0.1
          imagePullPolicy: Always
          name: py
          ports:
            - containerPort: 5000
          resources: {}
          volumeMounts:
          - mountPath: /app/config.ini
            name: db-config
            readOnly: true
            subPath: config.ini
      restartPolicy: Always
      volumes:
        - name: spiffe-workload-api
          csi:
            driver: "csi.spiffe.io"
            readOnly: true
        - name: db-config
          emptyDir: {}
        - name: mount-inputfile
          configMap:
            name: path-to-inputfile
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: apps
spec:
  type: NodePort
  selector:
    app: apps
  ports:
    - name: "8000"
      port: 8000
      targetPort: 5000
status:
  loadBalancer: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: py
  annotations:
    route.openshift.io/termination: edge
spec:
  rules:
  - host: py.$APP_DOMAIN
    http:
      paths:
      - pathType: Prefix
        path: /
        backend:
          service:
            name: apps
            port:
              number: 8000